# -*- after-save-hook: org-latex-export-to-pdf; -*-
#+options: date:nil
#+language: bt-br
#+latex_header: \usepackage[a4paper, margin=2cm]{geometry}
#+latex_header: \usepackage{indentfirst}
#+latex_header: \usepackage[]{babel}
#+latex_header: \usepackage{float}
#+latex_header: \usepackage{color, colortbl}
#+latex_header: \usepackage{titling}
#+latex_header: \setlength{\droptitle}{-1.5cm}
#+latex_header: \hypersetup{ colorlinks = true, urlcolor = blue }
#+latex_header: \definecolor{beige}{rgb}{0.93,0.93,0.82}
#+latex_header: \definecolor{brown}{rgb}{0.4,0.2,0.0}

* Memória virtual - Desempenho (aula 27/05)
*** Otimização
   Se encher a memória, é necessária uma política de reposição de páginas. A página só é
   escrita no disco caso já se tenha escrito nele.

*** Frames
  - Frame: página física
  - Page: página virtual

  Lugares na memória principal onde colocar as pages.

  Dado uma sequênca de acessos, como o algoritmo se comporta?
  1. Aleatoriamente;
  2. Monitoração de execução de programas reais

*** FIFO
   Retira-se a página que está a mais tempo na memória. Anomalia de *belady*.

** Fifo e segunda chance
    3. Segunda chance: FIFO modificado. Se o bit de referência for 0, remova-a. Se for 1,
       dê uma segunda chance. Fácil de implementar, degenera se todos os bits estiverem
       setados. Percorre a lista de todas, não pega a mais recente. Estão todos setados
       caso a memória esteja com muita demanda.
    4. Segunda chance ao segunda chance: páginas na ordem de 1 a 4. De sem ref e limpa a
       com ref e suja.

*** Política ótima
   Não factível! Pode ser aproximada. Número de page faults é menor.

*** LRU
   Remove a página que foi usada há mais tempo. Implementação complicada, pois tem que
   guardar cada posição de memória e seu tempo! Não sofre da anomalia de Belady!
**** Aproximações
    1. *LRU:* Basta inicializar o bit de referência com 0 e deixar o hardware colocá-lo em 1 quando
       a página for acessada. E quando todas as páginas tiverem sido referenciadas?
    2. *LRU:* mais bits de referência: Guardar o número de bits em um byte. SHR e &. A página com o menor valor do byte
       de referência deve ser removida.


*** LFU e MFU = implementações caras.

** Modelo de working set
   Janela de trabalho é uma medida de localidade. $\Delta$ é seu tamanho. É a medida das
   últimas delta references a páginas da memória.

   O tamanho médio da janela é o número de frames a serem alocados por processo.

*** Como definir $\Delta$?
    Monitoração de um conjunto de programas.

    1. Formalmente Não permite a utilização de mais que /n/ frames.
    2. *Informalmente* (melhor jeito) Assume-se que o processo vai usar /n/ frames, mas não se garante.
       Serve para ter uma ideia de quantos processos o sistema consegue tratar de forma eficiente.

** Thrasing
   Solução para o caso de haverem mais processos.

   Número de page faults aumenta consideravelmente. Quando o pc para e não responde mais
   (gasta-se mais tempo decidindo o que fazer, do que fazendo algo). *Ex:* ineficência de
   plugins de navegadores.
* Memória virtual - Linux (aula 29/05)
  Compartilhamento de memória permite um ganho significativo no desempenho.

  No Linux podemos identificar compartilhamento de memória:
   - Entre buffers de bloco e página;
   - Entre páginas através de copy-on-write;
   - Entre subrotinas sendo executadas.
  Foco na memória principal.

** Entre buffers
*** Buddy heap
   Páginas são agrupadas em blocos de dois por listas encadeadas.
*** Contadores de referência
   Usados para saber se alguma página já foi usada e pode ser liberada ou se ainda existe
   alguém que precise dela.

   Inicia-se com c=0. Quando cria-se uma página, c$++$; quando é destruída, c$--$.

   Simples e eficiente.

** Entre páginas
*** Diversos sabores de páginas
   - Sem pistolão: zero filled (primeiro acesso retorna página vazia).
   - Com pistolão: backed (acessos à página retornam páginas de arquivo padrinho).

   - Private: acesso por único processo.
   - Shared: acesso por vários processos.

*** Fork
   Copia todas as páginas na memória para a nova tarefa. Ineficiente e problemas de
   acesso.

**** Copy-on-write (quase máximo compartilhamento)
    Compartilha a página somente na leitura.

** Subrotinas

*** a.out
    Código todo é linkado automaticamente.

*** ELF (mais moderno)
    Linkado dinamicamente (carrega subrotinas sob demanda). *Shared libs:* se a subrotina
 estiver na memória, o SO não carrega outra cópia.
* Arquivos (aula 03/06)
** Definição
   Conjunto de dados normalmente não voláteis; menor unidade de informação secundária.
   Qualquer dado não-volátil tem que ser guardado em arquivos.
** Definido por
   - Nome
   - Tipo
   - Lugar
   - Tamanho
   - Permissões
   - Tempos
** O que mais além de arquivos?
   - Diretórios: coleção de arquivos.
   - Partições: pedaços de memória secundária
** Operações com arquivos
   Criar, ler, mover, reposicionar(bem útil), truncar (cortar de um ponto para frente), apagar.
** Abir/fechar
   Não é essencial, apenas uma otimização através de buffers na memória
   principal. Consegue-se fazer leitura sem abrir o arquivo.
*** Problemas
    - Esquecer de fechar (memory leak)
    - Acessos concorrentes
*** Tomar cuidado com
    - Localização no disco (pode estar mudando)
    - Reference count pra ter certeza de que ninguém vai apagar coisas que não estão sendo
      usadas.
** Métodos de acesso
   - Sequencial: ler, escrever e rebobinar (originado de fita). Ex: pdf, áudio, zip, tar,
     .o.
   - Direto: ler, escrever, reposicionar (seek) - originado de disco. Ex: banco de dados,
     binário, libraries, ávores B.
** Diretórios
   Estrutura é um DAG (grafo acíclico direcionado)
   - Cria arquivo
   - Apaga
   - Busca
   - Lista conteúdo

   Não é muito diferente de arquivos. Symlink(shortcut) e hard link().

   Append só serve para log.
* Arquivos - Implementação (aula 03/06)
** Alocação de espaço em disco
*** Alocação contígua
    Fácil implementação e rápido acesso. Não é muito usado.
*** Encadeadas
    Ex: sistema pick - lista duplamente encadeada (só banco de dados).
    - Sem fragmentação, simples de aumentar, criar e apagar. Aproveita o máximo o disco.
    - Ruim para acesso sequencial. Se um link se perder, perde-se o arquivo todo (corrompe
      a informação).

      Não é muito usado.
**** FAT
     Diminui os erros, menos eficiente.
*** Indexada
    Uma fat para todos os arquivos; um índice por arquivo. Não importa a eficiência.
    - Tem que usar um índice, mesmo que o arquivo use um bloco só.
    - Tamanho ideal é um bloco de disco.
      Solução: unix /inode/.
* Sistemas de E/S (aula 05/06)
  - mouse é lento
  - discos e impressora rápidos
  - trânsito de dados complexo, velocidade difernetes: E/S complexos
  - Sistema embutido é mais simples.
  - Sistemas embutidos são usados em robôs, máquinas, controladores de aeronaves.
** Tipos de dispositivos e/s
   Só há duas classificações:
*** Bloco
    - podem ler escrever em qualquer bloco
    - ex: discos
*** Caracteres
    - dados são sequência de caracteres
    - não tem seek
    - ex: termiais, impressoras, mice, clock, video, fitas.

** Componentes de um dispositivo
   - Dispositivo
   - Controlador
*** Software que controla (device driver)
    Nem sempre funciona: $ioctl()$

** Processador
   É feito um mapeamento do processador para os registradores:
   - através de comandos especiais de leituras de portas;
   - através de mapeamento de memória (mais usado, porém pode levar a erros). Ex associar
     um endereço ao disco rígido;

** Modo de acesso
   Usa-se todos, não consegue-se usar DMA para todos (restrito). Usa-se as interrupções
   rapidamente, aí tem que usar polling.
*** Polling
    Handshake: fica esperando o resultado chegar (já chegou? já chegou?). Espera ocupada.
*** Interrupções
    Sem espera ocupada. Cpu programa E/S. Quando os dados ficam prontos, o cpu dá um jump
    (interrupção) e dados são lidos.
*** DMA (método mais eficiente)
    Métodos anteriores possuem transferência de poucos bytes por vez.  Vc tem um
    controlador ligado ao barramento. Está executando um programa, aloca um buffer e manda
    uma msg pro DMA. DMA guarda as palavras no buffer e gera apenas uma interrupção para
    voltar. Copia um bloco inteiro por vez.

** Software
   Objetivo: ser independente do dispositivo.

   Interface única. Tratado como arquivo.


   - Blocante ou assíncrono (em geral é)
   - Não blocante


   Programas são síncronos.

   - Compartilhar (ex: discos)
   - Não compartilhar (ex: impressoras)
* Segurança (aula 10/06)
** Razões de perda de dados
   - Catástrofe naturais
   - Erros de hw/sw
   - Erros humanos
   - Erros bizantinos (invasores)

** Invasores
   - Passivos: leitura
   - Ativos: modificação
   - Ex: casuais, internos (pertence à organização), externos (), determinados, hackers, ladrões, espionagem, violação
     de privacidade.
